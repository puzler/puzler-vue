export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

/** Mutations related to app authentication */
export type AuthMutations = {
  /** Used to confirm an email with a token */
  confirmEmail?: Maybe<ConfirmEmailPayload>;
  /** Used to request an email with a token used to reset a User's password */
  requestPasswordReset?: Maybe<RequestPasswordResetPayload>;
  /** Used to reset a password with a token */
  resetPassword?: Maybe<ResetPasswordPayload>;
  /** Used to sign in with email and password */
  signIn?: Maybe<SignInPayload>;
  /** Used to sign in with a OAuth code */
  signInWithOAuth?: Maybe<SignInWithOAuthPayload>;
  /** Used to sign out by invalidating the User's JWT */
  signOut?: Maybe<SignOutPayload>;
  /** Used to invalidate all of the User's current login tokens */
  signOutAllLocations?: Maybe<SignOutAllLocationsPayload>;
  /** Used to sign up as a User */
  signUp?: Maybe<SignUpPayload>;
};


/** Mutations related to app authentication */
export type AuthMutationsConfirmEmailArgs = {
  input: ConfirmEmailInput;
};


/** Mutations related to app authentication */
export type AuthMutationsRequestPasswordResetArgs = {
  input: RequestPasswordResetInput;
};


/** Mutations related to app authentication */
export type AuthMutationsResetPasswordArgs = {
  input: ResetPasswordInput;
};


/** Mutations related to app authentication */
export type AuthMutationsSignInArgs = {
  input: SignInInput;
};


/** Mutations related to app authentication */
export type AuthMutationsSignInWithOAuthArgs = {
  input: SignInWithOAuthInput;
};


/** Mutations related to app authentication */
export type AuthMutationsSignOutArgs = {
  input: SignOutInput;
};


/** Mutations related to app authentication */
export type AuthMutationsSignOutAllLocationsArgs = {
  input: SignOutAllLocationsInput;
};


/** Mutations related to app authentication */
export type AuthMutationsSignUpArgs = {
  input: SignUpInput;
};

/** Queries related to app authentication */
export type AuthQueries = {
  /** The currently logged in User */
  me?: Maybe<User>;
};

/** Autogenerated input type of ConfirmEmail */
export type ConfirmEmailInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The token attatched to the link sent in the confirmation email */
  token: Scalars['String']['input'];
};

/** Autogenerated return type of ConfirmEmail. */
export type ConfirmEmailPayload = {
  __typename?: 'ConfirmEmailPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Error messages passed along with mutation response */
  errors?: Maybe<Array<Scalars['String']['output']>>;
  /** A Signed JWT for authenticating a user */
  jwt?: Maybe<Scalars['String']['output']>;
  /** Flag marking if mutation was successful */
  success: Scalars['Boolean']['output'];
};

/** The base Mutation Object */
export type PuzlerMutations = AuthMutations & {
  __typename?: 'PuzlerMutations';
  /** Used to confirm an email with a token */
  confirmEmail?: Maybe<ConfirmEmailPayload>;
  /** Used to request an email with a token used to reset a User's password */
  requestPasswordReset?: Maybe<RequestPasswordResetPayload>;
  /** Used to reset a password with a token */
  resetPassword?: Maybe<ResetPasswordPayload>;
  /** Used to sign in with email and password */
  signIn?: Maybe<SignInPayload>;
  /** Used to sign in with a OAuth code */
  signInWithOAuth?: Maybe<SignInWithOAuthPayload>;
  /** Used to sign out by invalidating the User's JWT */
  signOut?: Maybe<SignOutPayload>;
  /** Used to invalidate all of the User's current login tokens */
  signOutAllLocations?: Maybe<SignOutAllLocationsPayload>;
  /** Used to sign up as a User */
  signUp?: Maybe<SignUpPayload>;
};


/** The base Mutation Object */
export type PuzlerMutationsConfirmEmailArgs = {
  input: ConfirmEmailInput;
};


/** The base Mutation Object */
export type PuzlerMutationsRequestPasswordResetArgs = {
  input: RequestPasswordResetInput;
};


/** The base Mutation Object */
export type PuzlerMutationsResetPasswordArgs = {
  input: ResetPasswordInput;
};


/** The base Mutation Object */
export type PuzlerMutationsSignInArgs = {
  input: SignInInput;
};


/** The base Mutation Object */
export type PuzlerMutationsSignInWithOAuthArgs = {
  input: SignInWithOAuthInput;
};


/** The base Mutation Object */
export type PuzlerMutationsSignOutArgs = {
  input: SignOutInput;
};


/** The base Mutation Object */
export type PuzlerMutationsSignOutAllLocationsArgs = {
  input: SignOutAllLocationsInput;
};


/** The base Mutation Object */
export type PuzlerMutationsSignUpArgs = {
  input: SignUpInput;
};

/** The base Query Object */
export type PuzlerQueries = AuthQueries & {
  __typename?: 'PuzlerQueries';
  /** The currently logged in User */
  me?: Maybe<User>;
};

/** Autogenerated input type of RequestPasswordReset */
export type RequestPasswordResetInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The email of the User requesting a reset */
  email: Scalars['String']['input'];
};

/** Autogenerated return type of RequestPasswordReset. */
export type RequestPasswordResetPayload = {
  __typename?: 'RequestPasswordResetPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Error messages passed along with mutation response */
  errors?: Maybe<Array<Scalars['String']['output']>>;
  /** Flag marking if mutation was successful */
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of ResetPassword */
export type ResetPasswordInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The new password to use */
  password: Scalars['String']['input'];
  /** Token sent to the User during a password reset request */
  token: Scalars['String']['input'];
};

/** Autogenerated return type of ResetPassword. */
export type ResetPasswordPayload = {
  __typename?: 'ResetPasswordPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Error messages passed along with mutation response */
  errors?: Maybe<Array<Scalars['String']['output']>>;
  /** A Signed JWT used to authenticate the User */
  jwt?: Maybe<Scalars['String']['output']>;
  /** Flag marking if mutation was successful */
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of SignIn */
export type SignInInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** User Email */
  email: Scalars['String']['input'];
  /** User Password */
  password: Scalars['String']['input'];
};

/** Autogenerated return type of SignIn. */
export type SignInPayload = {
  __typename?: 'SignInPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Error messages passed along with mutation response */
  errors?: Maybe<Array<Scalars['String']['output']>>;
  /** A Signed JWT for Authenticating the User */
  jwt?: Maybe<Scalars['String']['output']>;
  /** Flag marking if mutation was successful */
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of SignInWithOAuth */
export type SignInWithOAuthInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The Authentication Code provided by the OAuth provider */
  code: Scalars['String']['input'];
  /** The OAuth provider */
  providerName: Scalars['String']['input'];
};

/** Autogenerated return type of SignInWithOAuth. */
export type SignInWithOAuthPayload = {
  __typename?: 'SignInWithOAuthPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Error messages passed along with mutation response */
  errors?: Maybe<Array<Scalars['String']['output']>>;
  /** A Signed JWT used to authenticate a User */
  jwt?: Maybe<Scalars['String']['output']>;
  /** Flag marking if mutation was successful */
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of SignOutAllLocations */
export type SignOutAllLocationsInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated return type of SignOutAllLocations. */
export type SignOutAllLocationsPayload = {
  __typename?: 'SignOutAllLocationsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Error messages passed along with mutation response */
  errors?: Maybe<Array<Scalars['String']['output']>>;
  /** Flag marking if mutation was successful */
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of SignOut */
export type SignOutInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The JWT to invalidate */
  token: Scalars['String']['input'];
};

/** Autogenerated return type of SignOut. */
export type SignOutPayload = {
  __typename?: 'SignOutPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Error messages passed along with mutation response */
  errors?: Maybe<Array<Scalars['String']['output']>>;
  /** Flag marking if mutation was successful */
  success: Scalars['Boolean']['output'];
};

/** Autogenerated input type of SignUp */
export type SignUpInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** Email used to sign in */
  email: Scalars['String']['input'];
  /** Password used to sign in */
  password: Scalars['String']['input'];
};

/** Autogenerated return type of SignUp. */
export type SignUpPayload = {
  __typename?: 'SignUpPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Error messages passed along with mutation response */
  errors?: Maybe<Array<Scalars['String']['output']>>;
  /** A Signed JWT for Authenticating the User */
  jwt?: Maybe<Scalars['String']['output']>;
  /** Flag marking if mutation was successful */
  success: Scalars['Boolean']['output'];
};

/** A User that can sign in */
export type User = {
  __typename?: 'User';
  /** A User's display name */
  displayName: Scalars['String']['output'];
  /** A User's email */
  email: Scalars['String']['output'];
  /** A User's first name */
  firstName?: Maybe<Scalars['String']['output']>;
  /** A User's id */
  id: Scalars['ID']['output'];
  /** A User's last name */
  lastName?: Maybe<Scalars['String']['output']>;
};
